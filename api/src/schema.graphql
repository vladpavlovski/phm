enum Role {
  reader
  user
  admin
}

enum ActivityStatus {
  active
  inactive
  retired
  unknown
}

# interface Human {
#   name: String
#   firstName: String!
#   lastName: String!
#   birthday: Date
#   userName: String
#   phone: String
#   email: String
#   gender: String
#   height: String
#   weight: String
#   externalId: String
#   activityStatus: String
#   country: String
#   city: String
#   createdAt: DateTime
#   updatedAt: DateTime
# }

type Player {
  playerId: ID! @id
  name: String
  firstName: String!
  lastName: String!
  birthday: Date
  userName: String
  phone: String
  email: String
  gender: String
  stick: String
  height: String
  weight: String
  externalId: String
  activityStatus: ActivityStatus
  countryBirth: String
  cityBirth: String
  country: String
  city: String
  avatar: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])

  user: User @relationship(type: "ACCOUNT_FOR", direction: IN)
  meta: MetaPlayer @relationship(type: "META_FOR", direction: IN)
  teams: [Team] @relationship(type: "PLAY_IN", direction: OUT)
  positions: [Position] @relationship(type: "HAS_POSITION", direction: OUT)
  jerseys: [Jersey] @relationship(type: "HAS_JERSEY", direction: OUT)
  achievements: [Achievement]
    @relationship(type: "HAS_ACHIEVEMENT", direction: OUT)
  awards: [Award] @relationship(type: "WIN_AN_AWARD", direction: OUT)
  sponsors: [Sponsor] @relationship(type: "SPONSORED_BY", direction: OUT)
  events: [Event] @relationship(type: "ORGANIZE_AN", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  metaHistories: [MetaHistory] @relationship(type: "META_FOR", direction: IN)
  games: [Game!]!
    @relationship(
      type: "TAKING_PART_IN"
      properties: "TakingPartIn"
      direction: OUT
    )
}

# FaceOff
# Goal + Assistance/Pass
# GoalShots
# Penalty
# Penalty shots
# Injuries
# Saves

type Mutation {
  CreateJerseys(teamId: ID!, nameBase: String!): [Jersey!]
    @cypher(
      statement: """
      MATCH (t:Team {teamId: $teamId})
      UNWIND range(1, 99) as numberRange
      CREATE (j:Jersey {
        jerseyId: apoc.create.uuid(),
        number: numberRange,
        name: $nameBase + ' - ' + numberRange
      })
      CREATE (j) <- [r:USE_JERSEY] - (t)
      RETURN j
      ORDER BY j.number ASC
      """
    )

  CreateTeamDefaultPositions(teamId: ID!, systemSettingsId: ID!): [Position!]
    @cypher(
      statement: """
      MATCH (team: Team {teamId: $teamId})
      MATCH (systemSettings: SystemSettings {
        systemSettingsId: $systemSettingsId
        }) - [:GUIDED_DEFAULT_BY]
        - (rulePack: RulePack)
        - [:SET_UP] -> (positionTypes: PositionType)
      UNWIND positionTypes AS positions
      CREATE (newPosition: Position {
        positionId: apoc.create.uuid(),
        name: positions.name,
        short: positions.short,
        description: positions.description,
        fromDefault: true
      })
      CREATE (newPosition) <- [:USE_POSITION] - (team)
      return newPosition
      """
    )
  DeleteGameEventSimple(gameEventSimpleId: ID!): GameEventSimple
    @cypher(
      statement: """
      MATCH (ges: GameEventSimple { gameEventSimpleId: $gameEventSimpleId })
      detach delete ges
      """
    )
  CreateGameEventSimple(
    teamId: ID!
    gameId: ID!
    gameEventSimpleId: ID!
    previousGameEventSimpleId: ID
    metaPlayerScoredById: ID
    metaPlayerAllowedById: ID
    metaPlayerFirstAssistId: ID
    metaPlayerSecondAssistId: ID
    metaPlayerSavedById: ID
    metaPlayerLostById: ID
    metaPlayerWonById: ID
    eventType: String
    eventTypeCode: String
    timestamp: String
    period: String
    remainingTime: String
    goalType: String
    goalSubType: String
    shotType: String
    shotSubType: String
    penaltyType: String
    penaltySubType: String
    duration: String
    metaPlayerPenalizedId: ID
    metaPlayerExecutedById: ID
    metaPlayerFacedAgainstId: ID
    injuryType: String
    description: String
    metaPlayerSufferedId: ID
  ): GameEventSimple!
    @cypher(
      statement: """
      MATCH (game: Game {gameId: $gameId})
      MATCH (team: Team {teamId: $teamId})
      MERGE (ges: GameEventSimple {
          gameEventSimpleId: $gameEventSimpleId,
          eventType: $eventType,
          eventTypeCode: $eventTypeCode,
          timestamp: $timestamp,
          period: $period,
          remainingTime: $remainingTime,
          goalType: $goalType,
          goalSubType: $goalSubType,
          shotType: $shotType,
          shotSubType: $shotSubType,
          penaltyType: $penaltyType,
          penaltySubType: $penaltySubType,
          duration: $duration,
          injuryType: $injuryType,
          description: $description
      })
      MERGE (ges) <- [:INITIATES_SIMPLE] - (game)
      MERGE (team) <- [:CREATED_BY] - (ges)

      WITH ges,
      team,
      game,
      $metaPlayerScoredById as metaPlayerScoredById,
      $metaPlayerFirstAssistId as metaPlayerFirstAssistId,
      $metaPlayerSecondAssistId as metaPlayerSecondAssistId,
      $metaPlayerAllowedById as metaPlayerAllowedById,
      $previousGameEventSimpleId as previousGameEventSimpleId,
      $metaPlayerSavedById as metaPlayerSavedById,
      $metaPlayerLostById as metaPlayerLostById,
      $metaPlayerWonById as metaPlayerWonById,
      $metaPlayerPenalizedId as metaPlayerPenalizedId,
      $metaPlayerExecutedById as metaPlayerExecutedById,
      $metaPlayerFacedAgainstId as metaPlayerFacedAgainstId,
      $metaPlayerSufferedId as metaPlayerSufferedId



      CALL apoc.do.when(
          $metaPlayerScoredById IS NOT NULL,
          'MATCH (metaPlayerScoredBy: MetaPlayer {metaPlayerId: metaPlayerScoredById})
          MERGE (metaPlayerScoredBy) <- [:SCORED_BY] - (ges)
          RETURN metaPlayerScoredBy
          ',
          '',
          {
            ges: ges,
            metaPlayerScoredById: metaPlayerScoredById
          }
      )
      YIELD value as metaPlayerScoredBy

      WITH ges,
      metaPlayerFirstAssistId,
      metaPlayerSecondAssistId,
      metaPlayerAllowedById,
      previousGameEventSimpleId,
      metaPlayerSavedById,
      metaPlayerWonById,
      metaPlayerLostById,
      metaPlayerPenalizedId,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerFirstAssistId IS NOT NULL,
          'MATCH (metaPlayerFirstAssist: MetaPlayer {metaPlayerId: metaPlayerFirstAssistId})
          MERGE (metaPlayerFirstAssist) <- [:FIRST_ASSIST_BY] - (ges)
          RETURN metaPlayerFirstAssist
          ',
          '',
          {
            ges: ges,
            metaPlayerFirstAssistId: metaPlayerFirstAssistId
          }
      )
      YIELD value as metaPlayerFirstAssist

      WITH ges,
      metaPlayerSecondAssistId,
      metaPlayerAllowedById,
      previousGameEventSimpleId,
      metaPlayerSavedById,
      metaPlayerWonById,
      metaPlayerLostById,
      metaPlayerPenalizedId,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerSecondAssistId IS NOT NULL,
          'MATCH (metaPlayerSecondAssist: MetaPlayer {metaPlayerId: metaPlayerSecondAssistId})
          MERGE (metaPlayerSecondAssist) <- [:SECOND_ASSIST_BY] - (ges)
          RETURN metaPlayerSecondAssist
          ',
          '',
          {
            ges: ges,
            metaPlayerSecondAssistId: metaPlayerSecondAssistId
          }
      )
      YIELD value as metaPlayerSecondAssist

      WITH ges,
      metaPlayerAllowedById,
      previousGameEventSimpleId,
      metaPlayerSavedById,
      metaPlayerWonById,
      metaPlayerLostById,
      metaPlayerPenalizedId,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerAllowedById IS NOT NULL,
          'MATCH (metaPlayerAllowedBy: MetaPlayer {metaPlayerId: metaPlayerAllowedById})
          MERGE (metaPlayerAllowedBy) <- [:ALLOWED_BY] - (ges)
          RETURN metaPlayerAllowedBy
          ',
          '',
          {
            ges: ges,
            metaPlayerAllowedById: metaPlayerAllowedById
          }
      )
      YIELD value as metaPlayerAllowedBy

      WITH ges,
      previousGameEventSimpleId,
      metaPlayerSavedById,
      metaPlayerWonById,
      metaPlayerLostById,
      metaPlayerPenalizedId,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerSavedById IS NOT NULL,
          'MATCH (metaPlayerSavedBy: MetaPlayer {metaPlayerId: metaPlayerSavedById})
          MERGE (metaPlayerSavedBy) <- [:SAVED_BY] - (ges)
          RETURN metaPlayerSavedBy
          ',
          '',
          {
            ges: ges,
            metaPlayerSavedById: metaPlayerSavedById
          }
      )
      YIELD value as metaPlayerSavedBy

      WITH ges,
      previousGameEventSimpleId,
      metaPlayerWonById,
      metaPlayerLostById,
      metaPlayerPenalizedId,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          previousGameEventSimpleId IS NOT NULL,
          'MATCH (previousGameEventSimple: GameEventSimple {gameEventSimpleId: previousGameEventSimpleId})
          MERGE (previousGameEventSimple) <- [:PREVIOUS_GAME_EVENT] - (ges)
          RETURN previousGameEventSimple
          ',
          '',
          {
            ges: ges,
            previousGameEventSimpleId: previousGameEventSimpleId
          }
      )
      YIELD value as previousGameEventSimple

      WITH ges,
      metaPlayerWonById,
      metaPlayerLostById,
      metaPlayerPenalizedId,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerWonById IS NOT NULL,
          'MATCH (metaPlayerWonBy: MetaPlayer { metaPlayerId: metaPlayerWonById })
          MERGE (metaPlayerWonBy) <- [:WON_BY] - (ges)
          RETURN metaPlayerWonBy
          ',
          '',
          {
            ges: ges,
            metaPlayerWonById: metaPlayerWonById
          }
      )
      YIELD value as metaPlayerWonBy

      WITH ges,
      metaPlayerLostById,
      metaPlayerPenalizedId,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerLostById IS NOT NULL,
          'MATCH (metaPlayerLostBy: MetaPlayer { metaPlayerId: metaPlayerLostById })
          MERGE (metaPlayerLostBy) <- [:LOST_BY] - (ges)
          RETURN metaPlayerLostBy
          ',
          '',
          {
            ges: ges,
            metaPlayerLostById: metaPlayerLostById
          }
      )
      YIELD value as metaPlayerLostBy

      WITH ges,
      metaPlayerPenalizedId,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerPenalizedId IS NOT NULL,
          'MATCH (metaPlayerPenalized: MetaPlayer { metaPlayerId: metaPlayerPenalizedId })
          MERGE (metaPlayerPenalized) <- [:PENALIZED] - (ges)
          RETURN metaPlayerPenalized
          ',
          '',
          {
            ges: ges,
            metaPlayerPenalizedId: metaPlayerPenalizedId
          }
      )
      YIELD value as metaPlayerPenalized

      WITH ges,
      metaPlayerExecutedById,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerExecutedById IS NOT NULL,
          'MATCH (metaPlayerExecutedBy: MetaPlayer { metaPlayerId: metaPlayerExecutedById })
          MERGE (metaPlayerExecutedBy) <- [:EXECUTED_BY] - (ges)
          RETURN metaPlayerExecutedBy
          ',
          '',
          {
            ges: ges,
            metaPlayerExecutedById: metaPlayerExecutedById
          }
      )
      YIELD value as metaPlayerExecutedBy

      WITH ges,
      metaPlayerFacedAgainstId,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerFacedAgainstId IS NOT NULL,
          'MATCH (metaPlayerFacedAgainst: MetaPlayer { metaPlayerId: metaPlayerFacedAgainstId })
          MERGE (metaPlayerFacedAgainst) <- [:FACED_AGAINST] - (ges)
          RETURN metaPlayerFacedAgainst
          ',
          '',
          {
            ges: ges,
            metaPlayerFacedAgainstId: metaPlayerFacedAgainstId
          }
      )
      YIELD value as metaPlayerFacedAgainst

      WITH ges,
      metaPlayerSufferedId

      CALL apoc.do.when(
          metaPlayerSufferedId IS NOT NULL,
          'MATCH (metaPlayerSuffered: MetaPlayer { metaPlayerId: metaPlayerSufferedId })
          MERGE (metaPlayerSuffered) <- [:SUFFERED] - (ges)
          RETURN metaPlayerSuffered
          ',
          '',
          {
            ges: ges,
            metaPlayerSufferedId: metaPlayerSufferedId
          }
      )
      YIELD value as metaPlayerSuffered

      RETURN ges
      """
    )
}

# type Query {
# orgBySlug(orgSlug: String!): Organization
#   @cypher(
#     statement: """
#     MATCH (org: Organization {urlSlug: $orgSlug})
#     return org
#     """
#   )
# }

type MetaPlayer {
  metaPlayerId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  player: Player @relationship(type: "META_FOR", direction: OUT)
  availabilityStatus: AvailabilityStatus
    @relationship(type: "GAME_READY_FOR", direction: IN)
  transfers: [Transfer]
    @relationship(type: "TRANSFER_FOR_PLAYER", direction: IN)
  stars: [Star] @relationship(type: "IS_STAR", direction: IN)
  collectedPasses: [Pass] @relationship(type: "COLLECT_BY", direction: IN)
  sentPasses: [Pass] @relationship(type: "SENT_BY", direction: IN)
  offsides: [Offside] @relationship(type: "CAUSED_BY", direction: IN)
  scoredGoals: [Goal] @relationship(type: "SCORED_BY", direction: IN)
  allowedGoals: [Goal] @relationship(type: "ALLOWED_BY", direction: IN)
  firedShots: [Shot] @relationship(type: "FIRED_BY", direction: IN)
  blockedShots: [Shot] @relationship(type: "BLOCKED_BY", direction: IN)
  facedShots: [Shot] @relationship(type: "FACED_TO", direction: IN)
  executedPenaltyShots: [PenaltyShot]
    @relationship(type: "EXECUTED_BY", direction: IN)
  facedPenaltyShots: [PenaltyShot]
    @relationship(type: "FACED_AGAINST", direction: IN)
  penalties: [Penalty] @relationship(type: "PENALIZED", direction: IN)
  intervalOnIce: [BigIntervalOnIce]
    @relationship(type: "SPENT_BY", direction: IN)
  fights: [Fight] @relationship(type: "PARTICIPATE_IN", direction: IN)
  lostFaceOffs: [FaceOff] @relationship(type: "LOST_BY", direction: IN)
  wonFaceOffs: [FaceOff] @relationship(type: "WON_BY", direction: IN)
  icings: [Icing] @relationship(type: "CAUSED_BY", direction: IN)
  lostTakeOvers: [TakeOver] @relationship(type: "LOST_BY", direction: IN)
  richedTakeOvers: [TakeOver] @relationship(type: "RICHED_BY", direction: IN)
  hits: [Hit] @relationship(type: "GIVE_BY", direction: IN)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  eventsGoal: [GameEventSimple] @relationship(type: "SCORED_BY", direction: IN)
  eventsAllowedGoal: [GameEventSimple]
    @relationship(type: "ALLOWED_BY", direction: IN)
  eventsFirstAssist: [GameEventSimple]
    @relationship(type: "FIRST_ASSIST_BY", direction: IN)
  eventsSecondAssist: [GameEventSimple]
    @relationship(type: "SECOND_ASSIST_BY", direction: IN)
  eventsLostBy: [GameEventSimple] @relationship(type: "LOST_BY", direction: IN)
  eventsWonBy: [GameEventSimple] @relationship(type: "WON_BY", direction: IN)
  eventsPenalties: [GameEventSimple]
    @relationship(type: "PENALIZED", direction: IN)
  eventsExecutedPenaltyShots: [GameEventSimple]
    @relationship(type: "EXECUTED_BY", direction: IN)
  eventsFacedPenaltyShots: [GameEventSimple]
    @relationship(type: "FACED_AGAINST", direction: IN)
  eventsInjuries: [GameEventSimple]
    @relationship(type: "SUFFERED", direction: IN)
  eventsSavedBy: [GameEventSimple]
    @relationship(type: "SAVED_BY", direction: IN)
}

type MetaHistory {
  metaHistoryId: ID! @id
  name: String
  rating: Float
  lineups: BigInt
  scoredGoals: BigInt
  assists: BigInt
  points: BigInt
  penalties: BigInt
  stars: BigInt
  allowedGoals: BigInt
  percentage: Float
  facedShots: BigInt
  shutOuts: BigInt
  average: Float
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  player: Player @relationship(type: "META_FOR", direction: OUT)
  season: Season @relationship(type: "PARTICIPATE_IN", direction: OUT)
  competition: Competition @relationship(type: "PARTICIPATE_IN", direction: OUT)
}

# person types: :TeamManager :Manager :Coach :CoachAssistant :Medic :Supporter :Referee :TimePicker :GameOfficial :LeagueOfficial
# orgs: [Organization]
#   @relationship(type: "HAS_ORGANIZATION_STAFF", direction: IN)
type Person {
  personId: ID! @id
  name: String
  firstName: String!
  lastName: String!
  birthday: Date
  userName: String
  phone: String
  email: String
  gender: String
  height: String
  weight: String
  externalId: String
  activityStatus: ActivityStatus
  countryBirth: String
  cityBirth: String
  country: String
  city: String
  avatar: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  user: User @relationship(type: "ACCOUNT_FOR", direction: IN)
  managers: [Person] @relationship(type: "HAS_MANAGER", direction: OUT)
  teams: [Team] @relationship(type: "HAS_TEAM_STAFF", direction: IN)
  games: [Game] @relationship(type: "HAS_GAME_STAFF", direction: IN)
  competitions: [Competition]
    @relationship(type: "HAS_COMPETITION_STAFF", direction: IN)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  payments: [Payment] @relationship(type: "INITIATES_PAYMENT", direction: OUT)
  orgs: [Organization] @relationship(type: "ENGAGED_IN", direction: OUT)
  awards: [Award] @relationship(type: "WIN_AN_AWARD", direction: OUT)
  sponsors: [Sponsor] @relationship(type: "SPONSORED_BY", direction: OUT)
  achievements: [Achievement]
    @relationship(type: "HAS_ACHIEVEMENT", direction: OUT)
  invitations: [Invitation!]!
    @relationship(
      type: "RESPOND_TO_INVITATION"
      properties: "RespondToInvitation"
      direction: OUT
    )
  venueManager: Venue @relationship(type: "HAS_MANAGER", direction: IN)
  occupations: [Occupation]
    @relationship(type: "USE_OCCUPATION", direction: OUT)
}

type Occupation {
  occupationId: ID! @id
  name: String
  description: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  person: [Person] @relationship(type: "TYPE_OF", direction: IN)
  team: Team @relationship(type: "USE_OCCUPATION", direction: IN)
  org: Organization @relationship(type: "USE_OCCUPATION", direction: IN)
}

type User {
  userId: ID! @id
  name: String
  firstName: String!
  lastName: String!
  nickName: String
  phone: String
  email: String
  emailVerified: Boolean
  avatar: String
  locale: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  player: Player @relationship(type: "ACCOUNT_FOR", direction: OUT)
  person: Person @relationship(type: "ACCOUNT_FOR", direction: OUT)
  comments: [Comment] @relationship(type: "WRITE_A_COMMENT", direction: OUT)
  sentInvitations: [Invitation] @relationship(type: "SENT_BY", direction: IN)
  events: [Event] @relationship(type: "ORGANIZE_AN", direction: OUT)
  settings: UserSettings @relationship(type: "HAS_SETTINGS", direction: OUT)
}

type UserSettings {
  userSettingsId: ID! @id
  language: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  user: User @relationship(type: "HAS_SETTINGS", direction: IN)
}

type Team {
  teamId: ID! @id
  name: String!
  fullName: String
  nick: String
  short: String
  status: ActivityStatus
  externalId: String
  logo: String
  primaryColor: String
  secondaryColor: String
  tertiaryColor: String
  foundDate: Date
  disabled: Boolean
  createdAt: DateTime @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])

  players: [Player] @relationship(type: "PLAY_IN", direction: IN)
  persons: [Person] @relationship(type: "HAS_TEAM_STAFF", direction: OUT)
  games: [Game!]!
    @relationship(type: "PLAYS", properties: "TeamGame", direction: OUT)
  awards: [Award] @relationship(type: "WIN_AN_AWARD", direction: OUT)
  sponsors: [Sponsor] @relationship(type: "SPONSORED_BY", direction: OUT)
  gameEvents: [GameEvent] @relationship(type: "CREATED_BY", direction: IN)
  gameEventsSimple: [GameEventSimple]
    @relationship(type: "CREATED_BY", direction: IN)
  transfersFrom: [Transfer] @relationship(type: "FROM_TEAM", direction: OUT)
  transfersTo: [Transfer] @relationship(type: "TO_TEAM", direction: IN)
  competitions: [Competition]
    @relationship(type: "PARTICIPATE_IN", direction: OUT)
  positions: [Position] @relationship(type: "USE_POSITION", direction: OUT)
  orgs: [Organization] @relationship(type: "PARTICIPATE_IN", direction: OUT)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  jerseys: [Jersey] @relationship(type: "USE_JERSEY", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  achievements: [Achievement]
    @relationship(type: "HAS_ACHIEVEMENT", direction: OUT)
  wear: Wear @relationship(type: "HAS_WEAR", direction: OUT)
  groups: [Group] @relationship(type: "PARTICIPATE_IN", direction: OUT)
  phases: [Phase] @relationship(type: "PARTICIPATE_IN", direction: OUT)
  seasons: [Season] @relationship(type: "PARTICIPATE_IN", direction: OUT)
  occupations: [Occupation]
    @relationship(type: "USE_OCCUPATION", direction: OUT)
}

interface TakingPartIn {
  host: Boolean
  jersey: Int
  position: String
  captain: Boolean @default(value: false)
  goalkeeper: Boolean @default(value: false)
  star: Boolean @default(value: false)
}

interface TeamGame {
  host: Boolean
}

type Game @auth(rules: [{ allowUnauthenticated: true }]) {
  gameId: ID! @id
  name: String!
  type: String
  startDate: Date
  endDate: Date
  startTime: Time
  endTime: Time
  foreignId: String
  info: String
  description: String
  timekeeper: String
  referee: String
  status: String
  flickrAlbum: String
  report: String
  paymentHost: String @default(value: "notPaid")
  paymentGuest: String @default(value: "notPaid")
  paymentTimekeeper: String @default(value: "notPaid")
  paymentReferee: String @default(value: "notPaid")
  headline: String
  perex: String
  body: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  teams: [Team!]!
    @relationship(type: "PLAYS", properties: "TeamGame", direction: IN)
  players: [Player!]!
    @relationship(
      type: "TAKING_PART_IN"
      properties: "TakingPartIn"
      direction: IN
    )
  gameEvents: [GameEvent] @relationship(type: "INITIATES", direction: OUT)
  gameEventsSimple: [GameEventSimple]
    @relationship(type: "INITIATES_SIMPLE", direction: OUT)
  awards: [Award] @relationship(type: "WIN_AN_AWARD", direction: OUT)
  # lineup: Lineup @relationship(type: "GENERATES", direction: IN)
  persons: [Person] @relationship(type: "HAS_GAME_STAFF", direction: OUT)
  phase: Phase @relationship(type: "COMPLETE_IN", direction: OUT)
  group: Group @relationship(type: "PARTICIPATE_IN", direction: OUT)
  venue: Venue @relationship(type: "TAKES_PLAYS_ON", direction: OUT)
  payment: Payment @relationship(type: "PAYMENT_FOR_GAME", direction: IN)
  event: Event @relationship(type: "TRANSFORM_TO", direction: IN)
  rulePack: RulePack @relationship(type: "GUIDED_BY", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  gameResult: GameResult @relationship(type: "COMPOSE_RESULT", direction: OUT)
  org: Organization @relationship(type: "PROVIDED_BY", direction: OUT)
}

type GameEvent {
  gameEventId: ID! @id
  timestamp: String!
  location: String
  period: String
  remainingTime: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  game: Game @relationship(type: "INITIATES", direction: IN)
  goals: [Goal] @relationship(type: "CREATE_GOAL", direction: OUT)
  penalties: [Penalty] @relationship(type: "CREATE_PENALTY", direction: OUT)
  faceOffs: [FaceOff] @relationship(type: "CREATE_FACEOFF", direction: OUT)
  passes: [Pass] @relationship(type: "CREATE_PASS", direction: OUT)
  hits: [Hit] @relationship(type: "CREATE_HIT", direction: OUT)
  penaltyShots: [PenaltyShot]
    @relationship(type: "CREATE_PENALTY_SHOT", direction: OUT)
  shots: [Shot] @relationship(type: "CREATE_SHOT", direction: OUT)
  revisions: [Revision] @relationship(type: "CREATE_REVISION", direction: OUT)
  fights: [Fight] @relationship(type: "CREATE_FIGHT", direction: OUT)
  intervalsOnIce: [BigIntervalOnIce]
    @relationship(type: "CREATE_INTERVAL_ON_ICE", direction: OUT)
  icings: [Icing] @relationship(type: "CREATE_ICING", direction: OUT)
  timeouts: [Timeout] @relationship(type: "CREATE_TIMEOUT", direction: OUT)
  offsides: [Offside] @relationship(type: "CREATE_OFFSIDE", direction: OUT)
  stars: [Star] @relationship(type: "CREATE_STAR", direction: OUT)
  takeOvers: [TakeOver] @relationship(type: "CREATE_TAKEOVER", direction: OUT)
  injuries: [Injury] @relationship(type: "CREATE_INJURY", direction: OUT)
  team: Team @relationship(type: "CREATED_BY", direction: OUT)
  saves: [Save] @relationship(type: "CREATE_SAVE", direction: OUT)
  previousGameEvent: GameEvent
    @relationship(type: "PREVIOUS_GAME_EVENT", direction: OUT)
  nextGameEvent: GameEvent
    @relationship(type: "PREVIOUS_GAME_EVENT", direction: IN)
}

type GameEventSimple {
  gameEventSimpleId: ID! @id
  timestamp: String
  location: String
  period: String
  remainingTime: String
  eventType: String
  eventTypeCode: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  game: Game @relationship(type: "INITIATES_SIMPLE", direction: IN)
  team: Team @relationship(type: "CREATED_BY", direction: OUT)
  previousGameEvent: GameEventSimple
    @relationship(type: "PREVIOUS_GAME_EVENT", direction: OUT)
  nextGameEvent: GameEventSimple
    @relationship(type: "PREVIOUS_GAME_EVENT", direction: IN)

  # universal properties:

  # goal:
  scoredBy: MetaPlayer @relationship(type: "SCORED_BY", direction: OUT)
  allowedBy: MetaPlayer @relationship(type: "ALLOWED_BY", direction: OUT)
  firstAssist: MetaPlayer @relationship(type: "FIRST_ASSIST_BY", direction: OUT)
  secondAssist: MetaPlayer
    @relationship(type: "SECOND_ASSIST_BY", direction: OUT)
  goalType: String
  goalSubType: String
  shotType: String
  shotSubType: String

  # faceOff
  lostBy: MetaPlayer @relationship(type: "LOST_BY", direction: OUT)
  wonBy: MetaPlayer @relationship(type: "WON_BY", direction: OUT)

  # penalty
  penaltyType: String
  penaltySubType: String
  duration: String
  penalized: MetaPlayer @relationship(type: "PENALIZED", direction: OUT)

  # penaltyShot

  facedAgainst: MetaPlayer @relationship(type: "FACED_AGAINST", direction: OUT)
  executedBy: MetaPlayer @relationship(type: "EXECUTED_BY", direction: OUT)

  # injury
  description: String
  injuryType: String
  suffered: MetaPlayer @relationship(type: "SUFFERED", direction: OUT)

  # save
  savedBy: MetaPlayer @relationship(type: "SAVED_BY", direction: OUT)
}

type Save {
  saveId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_SAVE", direction: IN)
  shot: Shot @relationship(type: "CREATE_SAVE", direction: IN)
  metaPlayer: MetaPlayer @relationship(type: "SAVED_BY", direction: OUT)
}

type Star {
  starId: ID! @id
  name: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_STAR", direction: IN)
  metaPlayer: MetaPlayer @relationship(type: "IS_STAR", direction: OUT)
  award: Award @relationship(type: "WIN_AN_AWARD", direction: OUT)
}

type Pass {
  passId: ID! @id
  locationStart: String
  locationEnd: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_PASS", direction: IN)
  collectBy: MetaPlayer @relationship(type: "COLLECT_BY", direction: OUT)
  sentBy: MetaPlayer @relationship(type: "SENT_BY", direction: OUT)
  shot: Shot @relationship(type: "ASSISTANCE", direction: OUT)
}

type Offside {
  offsideId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_OFFSIDE", direction: IN)
  causedBy: MetaPlayer @relationship(type: "CAUSED_BY", direction: OUT)
  checkedBy: Revision @relationship(type: "CHECKED_BY", direction: OUT)
}

type Goal {
  goalId: ID! @id
  type: String
  subType: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_GOAL", direction: IN)
  scoredBy: MetaPlayer @relationship(type: "SCORED_BY", direction: OUT)
  allowedBy: MetaPlayer @relationship(type: "ALLOWED_BY", direction: OUT)
  shot: Shot @relationship(type: "CREATED_BY", direction: OUT)
  checkedBy: Revision @relationship(type: "CHECKED_BY", direction: OUT)
  canceledBy: Revision @relationship(type: "CANCELED_BY", direction: OUT)
}

type Shot {
  shotId: ID! @id
  type: String
  subType: String
  target: String
  style: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_SHOT", direction: IN)
  firedBy: Player @relationship(type: "FIRED_BY", direction: OUT)
  facedTo: Player @relationship(type: "FACED_TO", direction: OUT)
  blockedBy: Player @relationship(type: "BLOCKED_BY", direction: OUT)
  pass: Pass @relationship(type: "ASSISTANCE", direction: IN)
  goal: Goal @relationship(type: "CREATED_BY", direction: IN)
  penaltyShot: PenaltyShot @relationship(type: "CREATED_BY", direction: OUT)
  save: Save @relationship(type: "CREATE_SAVE", direction: OUT)
}

type PenaltyShot {
  penaltyShotId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_PENALTY_SHOT", direction: IN)
  penalty: Penalty @relationship(type: "CREATED_BY", direction: OUT)
  facedAgainst: MetaPlayer @relationship(type: "FACED_AGAINST", direction: OUT)
  executedBy: MetaPlayer @relationship(type: "EXECUTED_BY", direction: OUT)
  shot: Shot @relationship(type: "CREATED_BY", direction: IN)
  checkedBy: Revision @relationship(type: "CHECKED_BY", direction: OUT)
  canceledBy: Revision @relationship(type: "CANCELED_BY", direction: OUT)
  createdBy: Revision @relationship(type: "CREATED_BY", direction: OUT)
}

union CheckedRevisions = Offside | Goal | PenaltyShot
union CanceledRevisions = Timeout | PenaltyShot | Goal

type Revision {
  revisionId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_REVISION", direction: IN)
  canceled: [CanceledRevisions]
    @relationship(type: "CANCELED_BY", direction: IN)
  checked: [CheckedRevisions] @relationship(type: "CHECKED_BY", direction: IN)
}

type Timeout {
  timeoutId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_TIMEOUT", direction: IN)
  canceledBy: Revision @relationship(type: "CANCELED_BY", direction: OUT)
}

type Penalty {
  penaltyId: ID! @id
  type: String
  subType: String
  duration: Float
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_PENALTY", direction: IN)
  penalized: Player @relationship(type: "PENALIZED", direction: OUT)
  penaltyShot: PenaltyShot @relationship(type: "CREATED_BY", direction: IN)
  suspension: Suspension
    @relationship(type: "CREATE_SUSPENSION", direction: OUT)
}

type BigIntervalOnIce {
  intervalOnIceId: ID! @id
  endTime: DateTime
  duration: Float
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent
    @relationship(type: "CREATE_INTERVAL_ON_ICE", direction: IN)
  spentBy: Player @relationship(type: "SPENT_BY", direction: OUT)
}

type Fight {
  fightId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_FIGHT", direction: IN)
  players: [Player] @relationship(type: "PARTICIPATE_IN", direction: OUT)
}

type FaceOff {
  faceOffId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_FACEOFF", direction: IN)
  lostBy: Player @relationship(type: "LOST_BY", direction: OUT)
  wonBy: Player @relationship(type: "WON_BY", direction: OUT)
}

type Icing {
  icingId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_ICING", direction: IN)
  causedBy: Player @relationship(type: "CAUSED_BY", direction: OUT)
}

type TakeOver {
  takeOverId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_TAKEOVER", direction: IN)
  lostBy: MetaPlayer @relationship(type: "LOST_BY", direction: OUT)
  richedBy: MetaPlayer @relationship(type: "RICHED_BY", direction: OUT)
}

type Hit {
  hitId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_HIT", direction: IN)
  giveBy: MetaPlayer @relationship(type: "GIVE_BY", direction: OUT)
}

type Injury {
  injuryId: ID! @id
  description: String
  startDate: Date
  endDate: Date
  type: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  gameEvent: GameEvent @relationship(type: "CREATE_INJURY", direction: IN)
  availabilityStatus: AvailabilityStatus
    @relationship(type: "SUFFERED_AN", direction: OUT)
}

#urbis: zde mám pocit že se hodí dát property injury type: Covid;Illnes;Upperbody;Lowerbody apd..
#vlad : VYMYSLET
# a opět zda je injury valid nebo již recovered? jakože už skončilo a opět ovlivní Availatility status

type Suspension {
  suspensionId: ID! @id
  description: String
  startDate: Date
  endDate: Date
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  availabilityStatus: AvailabilityStatus
    @relationship(type: "HAS_AN_IMPACT", direction: OUT)
  penalty: Penalty @relationship(type: "CREATE_SUSPENSION", direction: IN)
}

#vlad : VYMYSLET
#urbis: zde musíme nějak vyřešit že Suspension start date is: Suspension end date is: a pokud je suspension již ukončená ovlivní to zase Availability status.. chápeš?

type AvailabilityStatus {
  availabilityStatusId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  metaPlayer: MetaPlayer @relationship(type: "GAME_READY_FOR", direction: OUT)
  injuries: Injury @relationship(type: "SUFFERED_AN", direction: IN)
  suspensions: Suspension @relationship(type: "HAS_AN_IMPACT", direction: IN)
}

type Transfer {
  transferId: ID! @id
  date: Date
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  teamFrom: Team @relationship(type: "FROM_TEAM", direction: IN)
  teamTo: Team @relationship(type: "TO_TEAM", direction: OUT)
  metaPlayer: MetaPlayer
    @relationship(type: "TRANSFER_FOR_PLAYER", direction: OUT)
}

type Discussion {
  discussionId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  comments: [Comment] @relationship(type: "CONTAINS", direction: OUT)
  game: Game @relationship(type: "HAS_DISCUSSION", direction: IN)
  competition: Competition @relationship(type: "HAS_DISCUSSION", direction: IN)
  person: Person @relationship(type: "HAS_DISCUSSION", direction: IN)
  org: Organization @relationship(type: "HAS_DISCUSSION", direction: IN)
  group: Group @relationship(type: "HAS_DISCUSSION", direction: IN)
  phase: Phase @relationship(type: "HAS_DISCUSSION", direction: IN)
  award: Award @relationship(type: "HAS_DISCUSSION", direction: IN)
  sponsor: Sponsor @relationship(type: "HAS_DISCUSSION", direction: IN)
  metaPlayer: MetaPlayer @relationship(type: "HAS_DISCUSSION", direction: IN)
  team: Team @relationship(type: "HAS_DISCUSSION", direction: IN)
  file: File @relationship(type: "HAS_DISCUSSION", direction: IN)
}

type Comment {
  commentId: ID! @id
  text: String
  dateTime: DateTime
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  previousComment: Comment
    @relationship(type: "PREVIOUS_COMMENT", direction: OUT)
  nextComment: Comment @relationship(type: "PREVIOUS_COMMENT", direction: IN)
  replyTo: Comment @relationship(type: "REPLY_TO", direction: OUT)
  repliedTo: [Comment] @relationship(type: "REPLY_TO", direction: IN)
  discussion: Discussion @relationship(type: "CONTAINS", direction: IN)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  author: User @relationship(type: "WRITE_A_COMMENT", direction: IN)
}

type Organization {
  organizationId: ID! @id
  name: String
  nick: String
  short: String
  status: String
  foundDate: Date
  legalName: String
  logo: String
  urlSlug: String
  ownerId: ID
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  sponsors: [Sponsor] @relationship(type: "SPONSORED_BY", direction: OUT)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  persons: [Person]
    @relationship(type: "HAS_ORGANIZATION_STAFF", direction: OUT)
  payments: [Payment] @relationship(type: "RECEIVES_PAYMENT", direction: IN)
  competitions: [Competition] @relationship(type: "OWNED_BY", direction: IN)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  rulePacks: [RulePack] @relationship(type: "GUIDED_BY", direction: OUT)
  teams: [Team] @relationship(type: "PARTICIPATE_IN", direction: IN)
  occupations: [Occupation]
    @relationship(type: "USE_OCCUPATION", direction: OUT)
  seasons: [Season] @relationship(type: "BELONGS_TO", direction: IN)
  orgPersons: [Person] @relationship(type: "ENGAGED_IN", direction: IN)
  orgSponsors: [Sponsor] @relationship(type: "ENGAGED_IN", direction: IN)
  orgAwards: [Award] @relationship(type: "PROVIDED_BY", direction: IN)
  orgRulePacks: [RulePack] @relationship(type: "PROVIDED_BY", direction: IN)
  orgEvents: [Event] @relationship(type: "CREATE_IN", direction: IN)
  orgGames: [Game] @relationship(type: "PROVIDED_BY", direction: IN)
}

type Sponsor {
  sponsorId: ID! @id
  name: String
  nick: String
  short: String
  claim: String
  web: String
  description: String
  legalName: String
  logo: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  players: [Player] @relationship(type: "SPONSORED_BY", direction: IN)
  teams: [Team] @relationship(type: "SPONSORED_BY", direction: IN)
  person: [Person] @relationship(type: "SPONSORED_BY", direction: IN)
  awards: [Award] @relationship(type: "SPONSORED_BY", direction: IN)
  competitions: [Competition] @relationship(type: "SPONSORED_BY", direction: IN)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  phases: [Phase] @relationship(type: "SPONSORED_BY", direction: IN)
  groups: [Group] @relationship(type: "SPONSORED_BY", direction: IN)
  orgs: [Organization] @relationship(type: "ENGAGED_IN", direction: OUT)
}

type Venue {
  venueId: ID! @id
  name: String
  nick: String
  short: String
  web: String
  description: String
  location: String
  foundDate: Date
  capacity: BigInt
  logo: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  competitions: [Competition]
    @relationship(type: "TAKES_PLAYS_ON", direction: IN)
  games: [Game] @relationship(type: "TAKES_PLAYS_ON", direction: IN)
  address: Address @relationship(type: "LOCATED_AT", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  managers: [Person] @relationship(type: "HAS_MANAGER", direction: OUT)
  seasons: [Season] @relationship(type: "TAKES_PLAYS_ON", direction: IN)
  phases: [Phase] @relationship(type: "TAKES_PLAYS_ON", direction: IN)
  groups: [Group] @relationship(type: "TAKES_PLAYS_ON", direction: IN)
  awards: [Award] @relationship(type: "HAS_AN_AWARD", direction: OUT)
}

type Address {
  addressId: ID! @id
  addressLine1: String
  addressLine2: String
  addressLine3: String
  city: String
  countyProvince: String
  zip: String
  country: String
  other: String
  latitude: Float
  longitude: Float
  addressType: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  venue: Venue @relationship(type: "LOCATED_AT", direction: IN)
  events: [Event] @relationship(type: "TAKES_PLACE_AT", direction: IN)
}

type Competition {
  competitionId: ID! @id
  name: String
  nick: String
  short: String
  foundDate: Date
  status: String
  logo: String
  organizationId: ID
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  org: Organization @relationship(type: "OWNED_BY", direction: OUT)
  rulePacks: [RulePack] @relationship(type: "GUIDED_BY", direction: OUT)
  events: [Event] @relationship(type: "ORGANIZE_AN", direction: OUT)
  venues: [Venue] @relationship(type: "TAKES_PLAYS_ON", direction: OUT)
  phases: [Phase] @relationship(type: "DIVIDED", direction: OUT)
  groups: [Group] @relationship(type: "DIVIDED", direction: OUT)
  seasons: [Season] @relationship(type: "BELONGS_TO", direction: OUT)
  sponsors: [Sponsor] @relationship(type: "SPONSORED_BY", direction: OUT)
  awards: [Award] @relationship(type: "BELONGS_TO", direction: IN)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  persons: [Person] @relationship(type: "HAS_COMPETITION_STAFF", direction: OUT)
  teams: [Team] @relationship(type: "PARTICIPATE_IN", direction: IN)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  metaHistories: [MetaHistory]
    @relationship(type: "PARTICIPATE_IN", direction: IN)
}

# union EventOrganizer = Competition | Team | User

type Event {
  eventId: ID! @id
  name: String
  description: String
  date: Date
  time: Time
  logo: String
  author: String
  userId: String
  organizationId: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  address: Address @relationship(type: "TAKES_PLACE_AT", direction: OUT)
  organizer: User @relationship(type: "ORGANIZE_AN", direction: IN)
  game: Game @relationship(type: "TRANSFORM_TO", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  invitation: Invitation
    @relationship(type: "CREATE_INVITATION", direction: OUT)
  invitationList: InvitationList
    @relationship(type: "CREATE_INVITATION_LIST", direction: OUT)
  org: Organization @relationship(type: "CREATE_IN", direction: OUT)
}

type Season {
  seasonId: ID! @id
  name: String
  nick: String
  short: String
  startDate: Date
  endDate: Date
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  org: Organization @relationship(type: "BELONGS_TO", direction: OUT)
  competitions: [Competition] @relationship(type: "BELONGS_TO", direction: IN)
  teamWears: [Wear] @relationship(type: "WEAR_FOR", direction: IN)
  venues: [Venue] @relationship(type: "TAKES_PLAYS_ON", direction: OUT)
  phases: [Phase] @relationship(type: "BELONGS_TO", direction: IN)
  groups: [Group] @relationship(type: "BELONGS_TO", direction: IN)
  awards: [Award] @relationship(type: "HAS_AN_AWARD", direction: OUT)
  teams: [Team] @relationship(type: "PARTICIPATE_IN", direction: IN)
  metaHistories: [MetaHistory]
    @relationship(type: "PARTICIPATE_IN", direction: IN)
}

type Group {
  groupId: ID! @id
  name: String!
  nick: String
  short: String
  teamsLimit: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  competition: Competition @relationship(type: "DIVIDED", direction: IN)
  rulePack: RulePack @relationship(type: "GUIDED_BY", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  games: [Game] @relationship(type: "PARTICIPATE_IN", direction: IN)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  awards: [Award] @relationship(type: "BELONGS_TO", direction: IN)
  sponsors: [Sponsor] @relationship(type: "SPONSORED_BY", direction: OUT)
  season: Season @relationship(type: "BELONGS_TO", direction: OUT)
  venue: [Venue] @relationship(type: "TAKES_PLAYS_ON", direction: OUT)
  phase: Phase @relationship(type: "BELONGS_TO", direction: OUT)
  teams: [Team] @relationship(type: "PARTICIPATE_IN", direction: IN)
}

# TODO: make rule CompetitionPhaseStatuses
# enum phaseStatus {
#   NOTSTARTED
#   RUNNING
#   FINISHED
#   POSTPONED
# }

type Phase {
  phaseId: ID! @id
  name: String!
  nick: String
  short: String
  startDate: Date
  endDate: Date
  status: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  competition: Competition @relationship(type: "DIVIDED", direction: IN)
  rulePack: RulePack @relationship(type: "GUIDED_BY", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  games: [Game] @relationship(type: "COMPLETE_IN", direction: IN)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  awards: [Award] @relationship(type: "BELONGS_TO", direction: IN)
  sponsors: [Sponsor] @relationship(type: "SPONSORED_BY", direction: OUT)
  season: Season @relationship(type: "BELONGS_TO", direction: OUT)
  venues: [Venue] @relationship(type: "TAKES_PLAYS_ON", direction: OUT)
  groups: [Group] @relationship(type: "BELONGS_TO", direction: IN)
  teams: [Team] @relationship(type: "PARTICIPATE_IN", direction: IN)
}

type Payment {
  paymentId: ID! @id
  dateTime: DateTime
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  initiator: Person @relationship(type: "INITIATES_PAYMENT", direction: IN)
  receiver: Organization @relationship(type: "RECEIVES_PAYMENT", direction: OUT)
  game: Game @relationship(type: "PAYMENT_FOR_GAME", direction: OUT)
}

#urbis: zde jsem stále zamotaný podle mě těch vztahů tady bude více.. ale nedokáži to vymyslet zatím odkládám

type Award {
  awardId: ID! @id
  name: String
  nick: String
  short: String
  description: String
  type: String
  foundDate: Date
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  seasons: [Season] @relationship(type: "HAS_AN_AWARD", direction: IN)
  competitions: [Competition] @relationship(type: "BELONGS_TO", direction: OUT)
  phases: [Phase] @relationship(type: "BELONGS_TO", direction: OUT)
  groups: [Group] @relationship(type: "BELONGS_TO", direction: OUT)
  teams: [Team] @relationship(type: "WIN_AN_AWARD", direction: IN)
  games: [Game] @relationship(type: "HAS_AN_AWARD", direction: IN)
  players: [Player] @relationship(type: "WIN_AN_AWARD", direction: IN)
  person: [Person] @relationship(type: "WIN_AN_AWARD", direction: IN)
  venue: Venue @relationship(type: "HAS_AN_AWARD", direction: IN)
  stars: [Star] @relationship(type: "WIN_AN_AWARD", direction: IN)
  sponsors: [Sponsor] @relationship(type: "SPONSORED_BY", direction: OUT)
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  orgs: [Organization] @relationship(type: "PROVIDED_BY", direction: OUT)
}

type Media {
  mediaId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  org: Organization @relationship(type: "HAS_MEDIA", direction: IN)
  phase: Phase @relationship(type: "HAS_MEDIA", direction: IN)
  group: Group @relationship(type: "HAS_MEDIA", direction: IN)
  sponsor: Sponsor @relationship(type: "HAS_MEDIA", direction: IN)
  award: Award @relationship(type: "HAS_MEDIA", direction: IN)
  player: Player @relationship(type: "HAS_MEDIA", direction: IN)
  team: Team @relationship(type: "HAS_MEDIA", direction: IN)
  comment: Comment @relationship(type: "HAS_MEDIA", direction: IN)
  person: Person @relationship(type: "HAS_MEDIA", direction: IN)
  game: Game @relationship(type: "HAS_MEDIA", direction: IN)
  competition: Competition @relationship(type: "HAS_MEDIA", direction: IN)
  event: Event @relationship(type: "HAS_MEDIA", direction: IN)
  wear: WearItem @relationship(type: "HAS_MEDIA", direction: IN)
  venue: Venue @relationship(type: "HAS_MEDIA", direction: IN)
  invitation: Invitation @relationship(type: "HAS_MEDIA", direction: IN)
  files: [File] @relationship(type: "HAS_FILE", direction: OUT)
}

type File {
  fileId: ID! @id
  name: String
  description: String
  type: String #isLogo, isCover, isProfilePicture, isGameCoveredge
  url: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  discussion: Discussion @relationship(type: "HAS_DISCUSSION", direction: OUT)
  media: Media @relationship(type: "HAS_FILE", direction: IN)
}

type Invitation {
  invitationId: ID! @id
  name: String
  description: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  event: Event @relationship(type: "CREATE_INVITATION", direction: IN)
  sentBy: User @relationship(type: "SENT_BY", direction: OUT)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
  invitationList: InvitationList @relationship(type: "HAS_LIST", direction: OUT)
}

type InvitationList {
  invitationListId: ID! @id
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  event: Event @relationship(type: "CREATE_INVITATION_LIST", direction: IN)
  invitation: Invitation @relationship(type: "HAS_LIST", direction: IN)
  users: [User!]!
    @relationship(
      type: "RESPOND_TO_INVITATION"
      properties: "RespondToInvitation"
      direction: IN
    )
}

interface RespondToInvitation {
  status: String
}

type Achievement {
  achievementId: ID! @id
  name: String
  description: String
  rule: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  players: [Player] @relationship(type: "HAS_ACHIEVEMENT", direction: IN)
  person: [Person] @relationship(type: "HAS_ACHIEVEMENT", direction: IN)
  teams: [Team] @relationship(type: "HAS_ACHIEVEMENT", direction: IN)
}

type RulePack {
  rulePackId: ID! @id
  name: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  orgs: [Organization] @relationship(type: "GUIDED_BY", direction: IN)
  phases: [Phase] @relationship(type: "GUIDED_BY", direction: IN)
  groups: [Group] @relationship(type: "GUIDED_BY", direction: IN)
  games: [Game] @relationship(type: "GUIDED_BY", direction: IN)
  competitions: [Competition] @relationship(type: "GUIDED_BY", direction: IN)
  penaltyShotStatuses: [PenaltyShotStatus]
    @relationship(type: "SET_UP", direction: OUT)
  periods: [Period] @relationship(type: "SET_UP", direction: OUT)
  shotTargets: [ShotTarget] @relationship(type: "SET_UP", direction: OUT)
  shotStyles: [ShotStyle] @relationship(type: "SET_UP", direction: OUT)
  shotTypes: [ShotType] @relationship(type: "SET_UP", direction: OUT)
  goalTypes: [GoalType] @relationship(type: "SET_UP", direction: OUT)
  penaltyTypes: [PenaltyType] @relationship(type: "SET_UP", direction: OUT)
  gameEventLocations: [GameEventLocation]
    @relationship(type: "SET_UP", direction: OUT)
  positionTypes: [PositionType] @relationship(type: "SET_UP", direction: OUT)
  injuryTypes: [InjuryType] @relationship(type: "SET_UP", direction: OUT)
  resultTypes: [ResultType] @relationship(type: "SET_UP", direction: OUT)
  resultPoints: [ResultPoint] @relationship(type: "SET_UP", direction: OUT)
  systemSettings: SystemSettings
    @relationship(type: "GUIDED_DEFAULT_BY", direction: IN)
  # orgs: [Organization] @relationship(type: "PROVIDED_BY", direction: OUT)
}

type PenaltyShotStatus {
  penaltyShotStatusId: ID! @id
  name: String!
  code: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

type Period {
  periodId: ID! @id
  name: String!
  code: String
  duration: Float!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

type ShotTarget {
  shotTargetId: ID! @id
  name: String!
  code: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

type ShotStyle {
  shotStyleId: ID! @id
  name: String!
  code: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

type ShotType {
  shotTypeId: ID! @id
  name: String!
  code: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
  subTypes: [ShotSubType] @relationship(type: "SET_UP", direction: OUT)
}

type ShotSubType {
  shotSubTypeId: ID! @id
  name: String!
  code: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  shotType: [ShotType] @relationship(type: "SET_UP", direction: IN)
}

type GoalType {
  goalTypeId: ID! @id
  name: String!
  code: String!
  priority: BigInt
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
  subTypes: [GoalSubType] @relationship(type: "SET_UP", direction: OUT)
}

type GoalSubType {
  goalSubTypeId: ID! @id
  name: String!
  code: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  goalType: GoalType @relationship(type: "SET_UP", direction: IN)
}

type PenaltyType {
  penaltyTypeId: ID! @id
  name: String!
  code: String!
  duration: Float!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
  subTypes: [PenaltySubType] @relationship(type: "SET_UP", direction: OUT)
}

type PenaltySubType {
  penaltySubTypeId: ID! @id
  name: String!
  code: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  penaltyType: PenaltyType @relationship(type: "SET_UP", direction: IN)
}

type GameEventLocation {
  gameEventLocationId: ID! @id
  name: String!
  fieldX: String!
  fieldY: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

type PositionType {
  positionTypeId: ID! @id
  name: String!
  short: String
  description: String
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

type Wear {
  wearId: ID! @id
  name: String!
  description: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  items: [WearItem] @relationship(type: "HAS_WEAR_ITEM", direction: OUT)
  team: Team @relationship(type: "HAS_WEAR", direction: IN)
  seasons: [Season] @relationship(type: "WEAR_FOR", direction: OUT)
}

# A pozor jsou týmy které mohou mít 3 série dresů - a samozřejmě vyvíjí se v čase, tedy nabízí se nám spíše to že Jersey (nebo ještě lépe vyrobíme entitu Wear (merch nebo prostě oblečení) ta bude mít vztah na Tým, Asociaci, Competition apd.. a jeden z proprieties bude Wear: Jersey a to bude mít vztah na Media) tím zajistíme že jich můžeme mít "nekonečně mnoho" dresů pro tým a ke každému Wear ještě dodáme vztah na "season" abychom označili v jaké sezoně jaké dresy (a jiné klubové oblečení) ten tým má / toto trochu bude pomáhat do budoucna i s e-shopem prodejem týmového oblečení (ale to do budoucna)  - viz příloha screenshot (existuje prostě 10k dresů za historii týmu)

type WearItem {
  wearItemId: ID! @id
  name: String!
  type: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  wear: Wear @relationship(type: "HAS_WEAR_ITEM", direction: IN)
  jersey: Jersey @relationship(type: "FOR_JERSEY", direction: IN)
  media: Media @relationship(type: "HAS_MEDIA", direction: OUT)
}

type Position {
  positionId: ID! @id
  name: String!
  short: String
  description: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  players: [Player] @relationship(type: "HAS_POSITION", direction: IN)
  team: Team @relationship(type: "USE_POSITION", direction: IN)
}

type Jersey {
  jerseyId: ID! @id
  name: String!
  number: BigInt!
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  player: Player @relationship(type: "HAS_JERSEY", direction: IN)
  team: Team @relationship(type: "USE_JERSEY", direction: IN)
  wearItem: WearItem @relationship(type: "FOR_JERSEY", direction: IN)
}

type GameResult {
  gameResultId: ID! @id
  periodActive: String
  gameStartedAt: DateTime
  gameStatus: String @default(value: "Not played")
  hostGoals: Int @default(value: 0)
  guestGoals: Int @default(value: 0)
  hostPenalties: Int @default(value: 0)
  guestPenalties: Int @default(value: 0)
  hostPenaltyShots: Int @default(value: 0)
  guestPenaltyShots: Int @default(value: 0)
  hostInjuries: Int @default(value: 0)
  guestInjuries: Int @default(value: 0)
  hostSaves: Int @default(value: 0)
  guestSaves: Int @default(value: 0)
  hostFaceOffs: Int @default(value: 0)
  guestFaceOffs: Int @default(value: 0)
  hostWin: Boolean @default(value: false)
  guestWin: Boolean @default(value: false)
  draw: Boolean @default(value: false)
  periodStatistics: [PeriodStatistic]
    @relationship(type: "HAS_PERIOD_STATISTICS", direction: OUT)
  game: Game @relationship(type: "COMPOSE_RESULT", direction: IN)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
}

type PeriodStatistic {
  periodStatisticId: ID! @id
  period: String
  hostGoals: Int @default(value: 0)
  guestGoals: Int @default(value: 0)
  hostPenalties: Int @default(value: 0)
  guestPenalties: Int @default(value: 0)
  hostPenaltyShots: Int @default(value: 0)
  guestPenaltyShots: Int @default(value: 0)
  hostInjuries: Int @default(value: 0)
  guestInjuries: Int @default(value: 0)
  hostSaves: Int @default(value: 0)
  guestSaves: Int @default(value: 0)
  hostFaceOffs: Int @default(value: 0)
  guestFaceOffs: Int @default(value: 0)
  gameResult: GameResult
    @relationship(type: "HAS_PERIOD_STATISTICS", direction: IN)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
}

type InjuryType {
  injuryTypeId: ID! @id
  name: String!
  priority: BigInt
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

type ResultType {
  resultTypeId: ID! @id
  name: String!
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

type ResultPoint {
  resultPointId: ID! @id
  name: String!
  code: String!
  points: Int!
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "SET_UP", direction: IN)
}

# SystemSettings entity should be only one in the whole DB.
# That why systemSettingsId = "system-settings"
type SystemSettings {
  systemSettingsId: ID! @id
  name: String
  language: String
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [UPDATE])
  rulePack: RulePack @relationship(type: "GUIDED_DEFAULT_BY", direction: OUT)
}
